{"pages":[{"title":"About Me","text":"个人信息 周灏 男 / 1992年 上海 联系方式 邮箱:johnchow9202@gmail.com Github: JohnChow2017","link":"/about/index.html"}],"posts":[{"title":"txt1","text":"","link":"/2019/01/10/txt1/"},{"title":"Hexo + Github Pages搭建个人独立博客(基于Mac)","text":"搭建该博客的初衷是为了整理并记录在学习前端开发过程中的知识点，便于日后查阅和温习，最终选择了🔗Hexo。 Hexo是一个快速，简洁且高效的博客框架，渲染速度快，支持Markdown格式, 拥有强大的插件系统，可以使用户更专注于博客本身。 我在搭建该博客的过程中遇到了一些问题并最终通过查阅网上的资料解决了，下文将记录我从零开始通过Hexo + Github Pages搭建个人独立博客的全过程以及遇到的问题和解决办法（基于Mac）。 系统环境配置（默认已经有Github账号及创建仓库完毕） 安装Node.js和Git 需要你的系统中已经安装了Node.js 和 Git 两个应用程序，如已安装可跳过此步骤。本人是通过官网上下载的最新版本，这里给出参考网址： 🔗下载Node.js 🔗下载Git 想要确认Node.js 和 Git 两个应用程序是否已经安装成功可以通过在终端里依次输入下面的指令来检测： 12$ node -v$ git 如果终端里打印出了node.js的版本号和git命令的使用帮助，说明安装成功。 安装Hexo安装完Node.js 和 Git 后，就可以使用npm来安装Hexo啦： 1$ npm install -g hexo-cli 然后我终端就报错了…🙂 最后找到原因是权限问题，解决方案：加上sudo执行，即： 1$ sudo npm install -g hexo-cli 按回车，按提示输入密码即可，然后等待安装成功就可以了。 然后创建blog文件夹，并初始化建立博客框架： 12345678# 在你的家目录下创建一个blog文件夹mkdir blog# 进入目录cd blog# 初始化目录hexo init# 开启本地服务 hexo s ⚠️tips：如果出现command notfind报错的话又可能是因为权限相关问题，加上sudo执行并按提示输入密码即可。 至此，我们就完成了Hexo的安装及初始化，别着急，接下来只需几部我们就可以进行本地的预览了🍗： 12345678# 先安装hexo server$ sudo npm install hexo-server # 然后生成静态页面并打开hexo本地服务$ hexo generate (或 hexo g)$ hexo server 当终端打印出以下信息后，说明你可以本地访问博客系统了，在浏览器输入localhost：4000这个网址，就可以看到博客首页了。 12INFO Start processingINFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. 哭了 终于出现了💃到这里说明你的环境以及没有问题了，成功了搭建起了博客框架 博客关联到Github仓库然后打开前面创建的blog(我的blog文件夹是在磁盘-房子里面)目录下的 _config.yml 文件，在修改最下方的deploy为： 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/JohnChow2017/JohnChow2017.github.io.git branch: master 然后在blog目录下执行操作： 12$ hexo generate$ hexo deploy ⚠️tips：如果出现command not found还是权限的问题，加上sudo执行并按提示输入密码即可。 如果终端执行 hexo deploy 命令后出现以下报错： 12$ ERROR Deployer not found: git$ 192:blog mac$ hexo deploy 输入：npm install –save hexo-deployer-git 再试试就好了。 中间我重启了下电脑，然后发现localhost4000访问不了了，然后我重新输入了下面的命令，启动服务就好了。 12$ hexo g$ hexo s 或 123456# 进入目录cd blog# 初始化目录hexo init# 开启本地服务 hexo s localhost就可以访问了。 Mac本地生成SSH KEY如果你不想每次发布都输入密码的话我们可以生成SSH KEY绑定Github。（具体SSH绑定Github步骤自行百度） 1.查看秘钥是否存在：打开终端查看是否已经存在SSH密钥：cd ~/.ssh 2.生成新的秘钥, 命令如下： 1$ssh-keygen -t rsa -C \"youremail@example.com\" 你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，因为这个Key仅仅用于简单的服务，所以也无需设置密码。 完成后会有如下显示： 123456Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /Users/你的电脑用户名/.ssh/id_rsa.Your public key has been saved in /Users/你的电脑用户名/.ssh/id_rsa.pub.The key fingerprint is:SHA256:5V6ZCQNS/3bVdl0GjGgQpWMFLazxTslnKbW2B1mbC+E example@gmail.com 如果服务器端需要公钥, 直接把.ssh目录下的id_rsa.pub配置即可, id_rsa为私钥一定要保密! 如果你执行 cd ~/.ssh发现ssh目录找不到 1-bash: cd: /Users/mac/.ssh: No such file or directory 进行如下操作就可以了：12345678# 用你注册GitHub时的邮箱号，进行秘钥生成cd ~ssh-keygen -t rsa -C \"xxxxxxx@qq.com\"# 系统就会生成一个隐藏文件夹.sshcd .sshls# 复制公钥vim id_rsa.pub 把cd.ssh.pub里面的文字粘到GitHub里面的SSH keys即可。 下载主题Hexo主题下载 安装主题以yilia主题为例： 在blog文件夹下终端执行 12$ hexo clean$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 启用主题找到目录下的_config.yml 文件,打开找到 theme：属性并设置为yilia 更新主题1234$ cd themes/yilia$ git pull$ hexo g # 生成$ hexo s # 启动本地web服务器 更新主题可能会有一小会延迟，稍后更新你的网址：example.github.io就可以看见了💥 🔗参考链接： https://www.jianshu.com/p/77db3862595c https://blog.csdn.net/superchao_5/article/details/51963942 https://segmentfault.com/a/1190000004947261 https://www.jianshu.com/p/484e4ca7edf0","link":"/2019/01/03/hello-world/"}],"tags":[],"categories":[]}